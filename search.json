[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "sketch-tmpdir",
    "section": "",
    "text": "TmpDir ()\n\nCreate temporary workspaces.\nThe main way to use TmpDir is through the exported object:\n\ntmpdir = TmpDir()\n\nWe start out in our project dir:\n\nd0 = Path.cwd(); d0\n\nPath('/Users/seem/code/sketch-tmpdir')\n\n\nSwitch to path foo/bar under a temp dir:\n\ntmpdir.new('foo/bar')\nd1 = tmpdir.dir\nPath.cwd()\n\nPath('/private/var/folders/ft/0gnvc3ts5jz4ddqtttp6tjvm0000gn/T/tmp19y8l0h4/foo/bar')\n\n\nIf we switch again, the previous dir is removed:\n\ntmpdir.new('foo/bar')\nassert not d1.exists()\nd2 = tmpdir.dir\nPath.cwd()\n\nPath('/private/var/folders/ft/0gnvc3ts5jz4ddqtttp6tjvm0000gn/T/tmpnjqprlft/foo/bar')\n\n\nFinally, revert to the original working directory, which also removes the remaining temporary directory:\n\ntmpdir.close()\nassert not d2.exists()\ntest_eq(Path.cwd(), d0)\n\nYou can also use it as a context manager to automatically revert to the original working directory at the end:\n\nwith tmpdir() as p:\n    d3 = tmpdir.dir\n    test_eq(Path.cwd().name, p.name)\nassert not d3.exists()\ntest_eq(Path.cwd(), d0)\n\nThe primary use-case is to write executable documentation for code that interacts with its workspace, as described in the examples below.\n\n\n\n\ndef git_repo():\n    \"Remote repo from git config.\"\n    cmd = 'git config --get remote.origin.url'\n    proc = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n    if proc.returncode: return\n    return proc.stdout.strip().split('/', 1)[1].split('.')[0]\n\nLet’s initialise a minimal repo to demonstrate:\n\ntmpdir.new()\n\n\ngit init -q\ngit remote add origin git@github.com:my-user/my-repo.git\n\nGet the repo name:\n\ntest_eq(git_repo(), 'my-repo')\n\nReturns None if you’re not in a git repo:\n\nwith tmpdir(): test_is(git_repo(), None)\n\nAnd you’re back to your original working directory:\n\nPath.cwd()\n\nPath('/Users/seem/code/sketch-tmpdir')\n\n\n\n\n\nThis section shows what the end-to-end nbdev hooks test could look like with tmpdir. The test checks that nbdev’s notebook-aware merge driver works. In order to do that we need to simulate a merge conflict, which involves some back-and-forth with git.\n\nfrom copy import deepcopy\nfrom execnb.nbio import dict2nb, mk_cell, read_nb, write_nb\nfrom fastcore.foundation import Config\nfrom nbdev.read import create_output, show_src\n\nStart a new workspace:\n\ntmpdir.new()\n\nInit a git repo and checkout our main branch – this is where we’ll run our tests:\n\ngit init\n\nInitialized empty Git repository in /private/var/folders/ft/0gnvc3ts5jz4ddqtttp6tjvm0000gn/T/tmpggvpu_sy/.git/\n\n\n\ngit checkout -b main\n\nSwitched to a new branch 'main'\n\n\nInstall nbdev hooks:\n\nnbdev_install_hooks\n\nHooks are installed.\n\n\nNext, we’ll simulate a merge conflict. First we add random.ipynb notebook to main. Here’s what it looks like to start with:\n\nfn = 'random.ipynb'\nmeta = {'nbformat': 4,'metadata':{'kernelspec':{'display_name':'Python 3','language': 'python','name': 'python3'}}}\nbase = dict2nb({'cells':[mk_cell('import random'), mk_cell('random.random()')], **meta})\nbase.cells[-1].output = create_output('0.3314001088639852\\n0.20280244713400464', 'plain')\nwrite_nb(base, fn)\nshow_nb(fn)\n\n# random.ipynb\n\n# %%\nimport random\n\n# %%\nrandom.random()\n# 0.3314001088639852\n# 0.20280244713400464\n\n\nCommit it:\n\ngit add .\ngit commit -q -m 'add random.ipynb'\n\nNext, checkout a new branch add-heading:\n\ngit checkout -b add-heading\n\nSwitched to a new branch 'add-heading'\n\n\nMake a change. We added a new markdown cell Calculate a random number:, imported os, and got different random.random() outputs – the perfect recipe for a merge conflict:\n\nours = deepcopy(base)\nours.cells[0].source+=',os' # Change first cell\nours.cells.insert(1, mk_cell('Calculate a random number:', cell_type='markdown')) # New cell\nours.cells[-1].output = create_output('0.3379097372590093\\n0.7379492349993123', 'plain') # Change outputs\nwrite_nb(ours, fn)\nshow_nb(fn)\n\n# random.ipynb\n\n# %%\nimport random,os\n\n# %%\nCalculate a random number:\n\n# %%\nrandom.random()\n# 0.3379097372590093\n# 0.7379492349993123\n\n\nCommit it:\n\ngit commit -am heading\n\n[add-heading 5b71b21] heading\n 1 file changed, 10 insertions(+), 3 deletions(-)\n\n\nGo back to main:\n\ngit checkout main\n\nSwitched to branch 'main'\n\n\nMake a different change:\n\nshow_nb(fn)\n\n# random.ipynb\n\n# %%\n# Random numbers\n\n# %%\nimport random,sys\n\n# %%\nrandom.random()\n# 0.6587181429602441\n# 0.5962200692415515\n\n\nCommit it:\n\ngit commit -am docs\n\n[main d3b0252] docs\n 1 file changed, 10 insertions(+), 3 deletions(-)\n\n\nAnd finally try to merge:\n\ngit merge add-heading\n\nOne or more conflict remains in the notebook, please inspect manually.\nAuto-merging random.ipynb\nCONFLICT (content): Merge conflict in random.ipynb\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\nWe have a merge conflict! But thanks to nbdev:\n\nConflicting outputs are automatically resolved\nThe notebook is left in a readable state.\n\n\nshow_nb(fn)\n\n# random.ipynb\n\n# %%\n# Random numbers\n\n# %%\n`<<<<<<< HEAD`\n\n# %%\nimport random,sys\n\n# %%\n`=======`\n\n# %%\nimport random,os\n\n# %%\nCalculate a random number:\n\n# %%\n`>>>>>>> add-heading`\n\n# %%\nrandom.random()\n# 0.6587181429602441\n# 0.5962200692415515\n\n\nClose tmpdir, and you’re back to your original working directory:\n\ntmpdir.close()\nPath.cwd()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sketch-tmpdir",
    "section": "",
    "text": "See core."
  }
]